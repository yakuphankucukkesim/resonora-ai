// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String
    credits       Int @default(10)
    stripeCustomerId String? @unique
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    uploadedFiles UploadedFile[]
    clips Clip[]
}

model UploadedFile {
    id String @id @default(cuid())
    s3Key String
    displayName String?
    uploaded Boolean @default(false)
    status String @default("queued")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    clips Clip[]

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@index([s3Key])
}

model Clip {
    id String @id @default(cuid())
    s3Key String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    uploadedFile UploadedFile? @relation(fields: [uploadedFileId], references: [id], onDelete: Cascade)
    uploadedFileId String?

    user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId String

    @@index([s3Key])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
